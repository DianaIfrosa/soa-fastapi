services:
  db:
    image: postgres:12.1-alpine
    # restart: always
    volumes:
      - postgres_data_db:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=diana123
      - POSTGRES_DB=postgres

  user_service:
    build: ./user-service
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    # restart: always
    depends_on:
      - db
      # - kafka
    volumes:
      - ./user-service/:/app/
    ports:
      - 8001:8000
    environment:
      - DATABASE_URI=postgresql://postgres:diana123@db/postgres # +asyncpg
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092

  product_service:
    build: ./product-service
    # restart: always
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    depends_on:
      - db
      # - kafka
    volumes:
      - ./product-service/:/app/
    ports:
      - 8002:8000
    environment:
      - DATABASE_URI=postgresql://postgres:diana123@db/postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092

  order_service:
    build: ./order-service
    # restart: always
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    depends_on:
      - db
      # - kafka
    volumes:
      - ./order-service/:/app/
    ports:
      - 8003:8000
    environment:
      - DATABASE_URI=postgresql://postgres:diana123@db/postgres
      - PRODUCT_SERVICE_HOST_URL=http://product_service:8000/api/v1/products/
      - USER_SERVICE_HOST_URL=http://user_service:8000/api/v1/users/
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092

  # logging_service:
  #   build: ./logging-service
  #   # restart: always
  #   command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
  #   depends_on:
  #     - db
  #     - kafka
  #   volumes:
  #     - ./logging-service/:/app/
  #   ports:
  #     - 8004:8000
  #   environment:
  #     - DATABASE_URI=postgresql://postgres:diana123@db/postgres    
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
  #     - KAFKA_GROUP_ID=my-group

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - 2181:2181
  #     - 2888:2888
  #     - 3888:3888

  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   links:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #   ports:
  #     - 9092:9092

  # init-kafka:
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - kafka
  #   entrypoint: [ '/bin/sh', '-c' ]
  #   command: |
  #     "
  #     # blocks until kafka is reachable
  #     kafka-topics --bootstrap-server kafka:29092 --list

  #     echo -e 'Creating kafka topics'
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic my-topic --replication-factor 1 --partitions 1

  #     echo -e 'Successfully created the following topics:'
  #     kafka-topics --bootstrap-server kafka:29092 --list
  #     "    

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   restart: "no"
  #   environment:
  #     KAFKA_BROKERCONNECT: "kafka:29092"
  #   ports:
  #     - 9000:9000
  #   depends_on:
  #     - kafka    

  nginx:
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./nginx_config.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - user_service
      - product_service
      - order_service
      # - logging_service

volumes:
  postgres_data_db: